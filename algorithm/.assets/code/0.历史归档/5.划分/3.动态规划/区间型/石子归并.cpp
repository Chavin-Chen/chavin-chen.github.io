/*
设有N堆石子排成一排，其编号为1，2，3，…，N。
每堆石子有一定的质量，可以用一个整数来描述，现在要将这N堆石子合并成为一堆。
每次只能合并相邻的两堆，合并的代价为这两堆石子的质量之和，合并后与这两堆石子相邻的石子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同。
例如有4堆石子分别为 1 3 5 2， 我们可以先合并1、2堆，代价为4，得到4 5 2， 又合并 1，2堆，代价为9，得到9 2
，再合并得到11，总代价为4+9+11=24； 如果第二步是先合并2，3堆，则代价为7，得到4
7，最后一次合并代价为11，总代价为4+7+11=22。 问题是：找出一种合理的方法，使总的代价最小，输出最小代价。

输入格式
    第一行一个数N表示石子的堆数N。
    第二行N个数，表示每堆石子的质量(均不超过1000)。
输出格式
    输出一个整数，表示最小代价。
数据范围
    1≤N≤300

样例输入：
4
4 1 1 4
样例输出：
18

*/

#include <algorithm>
#include <cstdio>
#include <cstring>

int w[101], dp[101][101];

int main() {
    int n;
    memset(dp, 0x7f, sizeof(dp));
    scanf("%d", &n);
    // 另 w[i] 为 [1:i]的权重之和
    for (int i = 1; i <= n; i++) {
        scanf("%d", w + i);
        w[i] += w[i - 1];
        dp[i][i] = 0;
    }
    for (int i = n - 1; i >= 1; i--) {
        for (int j = i + 1; j <= n; j++) {
            for (int k = i; k < j; k++) {
                // 区间分成两段 [i,k]、[k+1,j] 取成本最低的一组
                dp[i][j] = std::min(dp[i][j], dp[i][k] + dp[k + 1][j] + w[j] - w[i - 1]);
            }
        }
    }
    printf("%d\n", dp[1][n]);
    return 0;
}
